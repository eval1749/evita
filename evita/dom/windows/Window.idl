// Copyright (c) 2013-2014 Project Vogue. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

interface Window : ViewEventTarget {
  [ImplementedAs = JavaScript] static readonly attribute Window focus;

  [ImplementedAs = JavaScript] static void handleEvent(Event event);

  [ImplementedAs = JavaScript] static void handleKeyboardEvent(
      KeyboardEvent event);

  [ImplementedAs = child_windows] readonly attribute FrozenArray<Window> children;

  // Window bounds in client coordinate is represented by
  //  * |clientLeft|, |clientTop| + |clientWidth| x |clientHeight|.
  readonly attribute float clientHeight;
  readonly attribute float clientLeft;
  readonly attribute float clientTop;
  readonly attribute float clientWidth;

  // The first child window in child window list.
  [ImplementedAs = first_child] readonly attribute Window ? firstChild;

  // Focus tick count for internal use.
  [ImplementedAs = JavaScript] readonly attribute long focusTick_;

  [ImplementedAs = window_id] readonly attribute long id;

  // The Last child window in child window list.
  [ImplementedAs = last_child] readonly attribute Window ? lastChild;

  // Next sibling window in child window list.
  [ImplementedAs = next_sibling] readonly attribute Window ? nextSibling;

  // A parent window
  [ImplementedAs = parent_window] readonly attribute Window ? parent;

  // Previous sibling window in child window list.
  [ImplementedAs = previous_sibling] readonly attribute Window
      ? previousSibling;
  readonly attribute DOMString state;

  [ImplementedAs = JavaScript] attribute DOMString status;

  [ImplementedAs = JavaScript] readonly attribute boolean visible;

  ////////////////////////////////////////////////////////////
  //
  // Operations
  //
  [ ImplementedAs = AddWindow, RaisesException ] void appendChild(
      Window newChild);

  [ ImplementedAs = ChangeParentWindow, RaisesException ] void changeParent(
      Window newParent);

  [RaisesException] void destroy();

  [RaisesException] void focus();

  [RaisesException] void hide();

  [RaisesException] void realize();

  [RaisesException] void releaseCapture();

  [ ImplementedAs = RemoveWindow, RaisesException ] void removeChild(
      Window child);

  [RaisesException] void setCapture();

  [RaisesException] void show();

  [RaisesException] void splitHorizontally(Window newRightWindow);

  [RaisesException] void splitVertically(Window newBelowWindow);

  [RaisesException] void update();
};
