# Copyright 2015 Project Vogue. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//testing/test.gni")
import("//evita/dom/idl_files.gni")
import("//evita/dom/js_files.gni")

source_set("dom") {
  sources = [
    "scheduler_impl.cc",
    "scheduler_impl.h",
    "script_thread.cc",
    "script_thread.h",
  ]
  deps = [
    ":components",
    "//base",
    "//evita/base",
    "//evita/ui",
  ]
}

source_set("components") {
  visibility = [ ":*" ]
  sources = [
    "$target_gen_dir/dom_jslib.cc",
    "$target_gen_dir/v8_strings.cc",
    "css/text_style.cc",
    "css/text_style.h",
    "editor.cc",
    "editor.h",
    "file_path.cc",
    "file_path.h",
    "global.cc",
    "global.h",
    "script_host.cc",
    "script_host.h",
    "timers/one_shot_timer.cc",
    "timers/one_shot_timer.h",
    "timers/repeating_timer.cc",
    "timers/repeating_timer.h",
    "timers/timer.cc",
    "timers/timer.h",
    "view_event_handler_impl.cc",
    "view_event_handler_impl.h",
  ]

  sources +=
      process_file_template(interface_idl_files + dictionary_idl_files,
                            [
                              "$bindings_gen_dir/ginx_{{source_name_part}}.cc",
                              "$bindings_gen_dir/ginx_{{source_name_part}}.h",
                            ])

  deps = [
    ":dom_jslib_cc",
    ":dom_unicode_lib_cc",
    ":dom_v8_strings_cc",
    ":lock",
    ":scheduler",
    ":v8_helper",
    "//base",
    "//base:i18n",
    "//common",
    "//evita/dom/bindings",
    "//evita/dom/components/clipboard",
    "//evita/dom/components/imaging",
    "//evita/dom/components/win_registry",
    "//evita/dom/components/win_resource",
    "//evita/dom/encodings",
    "//evita/dom/forms",
    "//evita/dom/os",
    "//evita/dom/public",
    "//evita/dom/text",
    "//evita/dom/timing",
    "//evita/dom/visuals",
    "//evita/dom/windows",
    "//evita/gc",
    "//evita/geometry",
    "//evita/ui/animation:public",
    "//regex",
  ]

  include_dirs = [
    root_gen_dir,
    bindings_gen_dir,
  ]
}

source_set("lock") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  sources = [
    "lock.cc",
    "lock.h",
  ]
  deps = [
    "//base",
  ]
}

source_set("v8_helper") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  sources = [
    "converter.cc",
    "converter.h",
    "dictionary.cc",
    "dictionary.h",
    "promise_resolver.cc",
    "promise_resolver.h",
    "time_stamp.cc",
    "time_stamp.h",
  ]
  deps = [
    "//base",
    "//evita/ginx",
    "//evita/text",
  ]
}

source_set("scheduler") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.
  sources = [
    "scheduler.cc",
    "scheduler.h",
    "scheduler_client.cc",
    "scheduler_client.h",
  ]
  deps = [
    "//base",
  ]
}

action("dom_jslib_cc") {
  deps = [
    ":check_jslib",
    "//evita/dom/visuals:css_properties",
  ]
  script = "make_get_jslib.py"
  outputs = [
    "$target_gen_dir/dom_jslib.cc",
  ]
  inputs = [
             "goog.js",
             "closure_compiler_workaround.js",
           ] + js_defs_files + js_lib_files

  # TODO(eval1749): We should pass list of JS files to "make_get_js_lib.py"
  # rather than command line.
  args = rebase_path(outputs) + rebase_path(inputs)
}

source_set("dom_unicode_lib_cc") {
  sources = [
    "unicode_icu.cc",
  ]
  deps = [
    "//base:i18n",
    "//third_party/icu:icuuc",
    "//v8",
  ]
}

action("dom_v8_strings_cc") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.

  script = "make_v8_strings.py"

  inputs = [
    "v8_strings.in",
  ]

  outputs = [
    "$target_gen_dir/v8_strings.cc",
    "$target_gen_dir/v8_strings.h",
  ]

  args = [ rebase_path("$target_gen_dir/v8_strings") ] +
         rebase_path(inputs, root_build_dir)
}

action("check_jslib") {
  deps = [
    "//evita/dom/bindings:js_externs",
    "//evita/dom/visuals:css_properties",
  ]

  js_files = js_defs_files + js_lib_files

  #js_file_list = "$target_gen_dir/jslib_file_list.txt"
  response_file_contents = rebase_path(js_files)

  script = "//tools/razzle/closure_compiler.py"
  outputs = [
    "$target_gen_dir/evita_checked.js",
  ]
  inputs = [
             "closure_compiler_workaround.js",
             "$target_gen_dir/evita_js_externs.js",
           ] + js_files
  args = [
    "--js_output_file=" + rebase_path("$target_gen_dir/evita_checked.js"),
    "--flagfile={{response_file_name}}",
    "--extern",
    "$target_gen_dir/evita_js_externs.js",
  ]
}

test("evita_dom_tests") {
  sources = [
    "css/text_style_test.cc",
    "editor_unittest.cc",
    "errors_unittest.cc",
    "file_path_unittest.cc",
    "lexers/lexers_unittest.cc",
    "polyfill_unittest.cc",
    "timers/timer_test.cc",
    "unicode_unittest.cc",
    "view_event_handler_impl_unittest.cc",
  ]

  data = []

  deps = [
    # TODO(eval1749): We should not have "application" dependency on
    # "evita_dom_test".
    "//evita:application",
    "//evita/dom/base:test_files",
    "//evita/dom/components:test_files",
    "//evita/dom/encodings:test_files",
    "//evita/dom/events:test_files",
    "//evita/dom/forms:test_files",
    "//evita/dom/os:test_files",
    "//evita/dom/testing:test_support",
    "//evita/dom/text:test_files",
    "//evita/dom/timing:test_files",
    "//evita/dom/visuals:test_files",
    "//evita/dom/windows:test_files",
    "//evita/visuals/css",
    "//evita/visuals/display:public",
  ]
}
