// Copyright (c) 2014 Project Vogue. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

callback FrameRequestCallback = void(DOMHighResTimeStamp time);
callback IdleRequestCallback = void(IdleDeadline deadline);

// Trace Event JSON
// pid  process id
// tid  thread id
// ts   wall time in micro second
// ph   A phase, see "base/trace/event/trace_event_common.h", "X" means
//      TRACE_EVENT_PHASE_COMPLETE.
// cat  category name
// name name
// args arguments to TRACE_EVENT macro
// dur  duration
// tdur thread duration
// tts  thread time
callback TraceLogOutputCallback =
    void(DOMString trace_event_json, boolean has_more_events);

interface Editor {
  static readonly attribute Performance performance;
  static readonly attribute DOMString v8Version;
  static readonly attribute DOMString version;

  [ImplementedAs = JavaScript] static Window activeWindow();

  [ImplementedAs = JavaScript] static void bindKey(
      Function window_class, DOMString key_combination, Function command,
      optional DOMString description);

  static Promise<boolean> checkSpelling(DOMString word_to_check);

  /*
   * |hint| is 1 to 1000: |v8::V8::IdelNotification(|hint|)|
   * otherwise call |v8::V8::LowMemoryNotification()|
   */
  static boolean collectGarbage(optional long hint);

  [ImplementedAs = JavaScript] static void exit();

  [ImplementedAs = JavaScript] static void forceExit();

  static Promise<DOMString> getFileNameForLoad(Window? window,
                                               DOMString file_name);
  static Promise<DOMString> getFileNameForSave(Window? window,
                                               DOMString file_name);
  static Promise<DOMString[]> getSpellingSuggestions(DOMString wrong_word);

  [ImplementedAs = JavaScript] static DOMString localizeText(
      DOMString format_text);

  [ImplementedAs = JavaScript] static DOMString localizeText(
      DOMString format_text, StringDict opt_dict);

  /**
   * @param {Window?} window
   * @param {string} message
   * @param {number} flags
   * @param {string=} opt_title
   * @return {!Promise.<number>}
   */
  static Promise<long> messageBox(Window? window, DOMString message,
                                  long flags, optional DOMString title);

  [ImplementedAs = GetMetrics] static Promise<DOMString> metrics(
      DOMString name);

  [ImplementedAs = JavaScript] static void open(DOMString fileName);

  [ImplementedAs = JavaScript] static long parseKeyCombination(DOMString spec);

  [ImplementedAs = JavaScript] static void processCommandLine(
      DOMString directory, DOMString[] args);

  static void setTabData(Window window, TabData tabData);

  static void setSwitch(DOMString name, SwitchValue new_value);

  [ImplementedAs = GetSwitch] static SwitchValue switch (DOMString name);

  [ImplementedAs = GetSwitchNames] static DOMString[] switcheNames();

  /**
   * @param {string} script_text
   * @param {string=} opt_file_name
   * @return {!RunScriptResult}
   */
  static RunScriptResult runScript(DOMString script_text,
                                   optional DOMString file_name);

  [ImplementedAs = JavaScript] static DOMString stringify(any value);

  // Trace Log
  // |config_string| is a dictionary formatted as a JSON string, containing both
  // category filters and trace options.
  //
  // Example:
  //   {
  //     "record_mode": "record-continuously",
  //     "enable_sampling": true,
  //     "enable_systrace": true,
  //     "enable_argument_filter": true,
  //     "included_categories": ["included",
  //                             "inc_pattern*",
  //                             "disabled-by-default-memory-infra"],
  //     "excluded_categories": ["excluded", "exc_pattern*"],
  //     "synthetic_delays": ["test.Delay1;16", "test.Delay2;32"]
  //     "memory_dump_config": {
  //       "triggers": [
  //         {
  //           "mode": "detailed",
  //           "periodic_interval_ms": 2000
  //         }
  //       ]
  //     }
  //   }
  static void startTraceLog(DOMString config_string);
  static void stopTraceLog(TraceLogOutputCallback callback);

  // Request animation frame
  static long requestAnimationFrame(FrameRequestCallback callback);
  static void cancelAnimationFrame(long handle);

  // Request Idle Callback
  static unsigned long requestIdleCallback(IdleRequestCallback callback,
                                           optional IdleRequestOptions options);
  static void cancelIdleCallback(unsigned long handle);
};
