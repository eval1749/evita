// Copyright (c) 2015 Project Vogue. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

enum RangeCase {
  // "This is capitalized."
  "CAPITALIZED_TEXT",
  // "This Is Capitalized Words."
  "CAPITALIZED_WORDS",
  // "this is lower."
  "LOWER",
  // "ThisIsMixed."
  "MIXED",
  // "THIS IS UPPER."
  "UPPER",
};

[
    CustomConstructor((TextDocument or Range) document_or_range),
    CustomConstructor((TextDocument or Range) document_or_range, long offset),
    CustomConstructor((TextDocument or Range) document_or_range, long start_offset,
                      long end_offset),
]
interface Range {
  readonly attribute boolean collapsed;
  readonly attribute TextDocument document;
  [ImplementedAs=end_value]
  attribute long end;
  [ImplementedAs=JavaScript]
  attribute long length;
  [ImplementedAs=start_value]
  attribute long start;
  attribute DOMString text;

  // TODO(yosin) We should make |analyzeCase()| as global function
  [ImplementedAs=JavaScript]
  RangeCase analyzeCase();

  // TODO(yosin) We should make |capitalized()| as global function
  [ImplementedAs=JavaScript]
  Range capitalize();

  Range collapseTo(long offset);

  [ImplementedAs=JavaScript]
  Range delete(Unit unit, optional long count);

  [ImplementedAs=JavaScript]
  Range endOf(Unit unit, optional Alter alter);

  void insertBefore(DOMString text);

  [ImplementedAs=JavaScript]
  DOMString[]? match(RegularExpression regexp);

  [ImplementedAs=JavaScript]
  Range move(Unit unit, optional long count);

  [ImplementedAs=JavaScript]
  Range moveEnd(Unit unit, optional long count);

  [ImplementedAs=JavaScript]
  Range moveEndWhile(DOMString char_set, optional long count);

  [ImplementedAs=JavaScript]
  Range moveStart(Unit unit, optional long count);

  [ImplementedAs=JavaScript]
  Range moveStartWhile(DOMString char_set, optional long count);

  [ImplementedAs=JavaScript]
  //  @param {string|!function(string, ...):string} replacement
  DOMString[]? replace(RegularExpression regexp, Object replacement);

  void setSpelling(long spelling);
  void setStyle(Style style);
  void setSyntax(DOMString syntax);

  [ImplementedAs=JavaScript]
  Range startOf(Unit unit, optional Alter alter);

  // TODO(yosin) We should make |toLocaleLowerCase()| as global function
  [ImplementedAs=JavaScript]
  Range toLocaleLowerCase();

  // TODO(yosin) We should make |toLocaleUpperCase()| as global function
  [ImplementedAs=JavaScript]
  Range toLocaleUpperCase();

  // TODO(yosin) We should make |toLowerCase()| as global function
  [ImplementedAs=JavaScript]
  Range toLowerCase();

  // TODO(yosin) We should make |toUpperCase()| as global function
  [ImplementedAs=JavaScript]
  Range toUpperCase();
};
